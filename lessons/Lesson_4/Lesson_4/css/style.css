/* Урок  4 https://www.youtube.com/watch?v=1WcBRzh0wlQ */

/* (1) Удаленное подключение. Подключение из внешнего источника (по ссылке) */

/* Мы можем скопировать в google fonts директиву @import , ее необходимо вставить в самом верху, она подключает ту же ссылку которая указана и в html файле.
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap'); */

/* &display=swap&subset=cyrillic-ext */
@import url("https://fonts.googleapis.com/css?family=Poppins:100,100italic,200,200italic,300,300italic,regular,italic,500,500italic,600,600italic,700,700italic,800,800italic,900,900italic&display=swap&subset=cyrillic-ext");
/* Если мы подключаем шрифт через google-fonts то можно использовать плагин для редактора vs code (comand+P потом >), 
он так и называется google-fonts.*/

/* Есть 4 большие разницы подключения через плагин и подключение через сайт google-fonts:
1. Такое подключение @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap');  здесь 
используется wght@500& - gulp это не нравится, он ломается на этом этапе (плагин все еще подключает старым способом и у gulp не возникает никаких претензий).
2. На сайте google-fonts мы сами выбираем такие стили кот. нам нужны. При подключении через плагин они подключаются абсолютно все, которые только есть 
и для оптимизации нам нужно поудалять не нужные начертания 100,100italic,200,200italic,300. Если мы оставим не нужные начертания, то мы будем грузить сайт.
3. Это отсутствие параментра &display=swap - это важный параметр для оптимизации, он контролирует правильную погрузку шрифта, откладывая ее фактически,
ваш сайт станет быстрее, если вы будете добавлять эту строку. Его нужно вставить вконце строки.
4. Нам допустим нужно что бы шрифт был кирилическим (на пример на сайте google-fonts в Poppins у него нету вообще кирилического начертания)
и если мы подключаем кирилический шрифт и работаем через плагин то нам нужно добавить еще такой параметр &subset=cyrillic-ext, 
тогда будут подключены семейства кирилические. */

/* Даже если у пользователя нет в системе установленного этого шрифта,
то сайт будет отображать, шрифт не будет устанавливаться в систему, просто в браузере будет отображаться шрифт именно 
с этим семейтсвом */
/* ------------------------------------------------------------------------------------------------------------------------ */

/* (2) Локальное подключение. Подключение локальных файлов */
/* Мы можем искать на сайте https://webfonts.pro/ там большая база данных. Там мы должны найти нужный нам шрифт 
и скачать не сжатый формат файла(мы можем уже нужный нам формат скачать web, но мы скачаем ttf - более оптимизированый шрифт)
и скачаем ttf. ttf - это формат не сжатого шрифта. Жмем на формат ttf правой кнопкой мыши safe link as..
Дальше нам нужно преобразовать эти файлы ttf в файлы для вэба - формат woff и woff2(на сайте есть уже для скачки формат woff, 
но поскольку нам нужен еще формат woff2 то по этому нам прийдется его преобразовать из ttf) так как ttf много весит для оптимизации мы используем формат woff и woff2.
Для того что бы нам сделать преобразование шрифтового файла мы используем сервис https://transfonter.org/. Мы будет подключать 
оба файла woff и woff2 потому что не все браузеры еще понимают самый последний формат woff2 по этому мы будем подключать оба формата.
Дальше заходим в разорхивированую папку со шрифтами форматов woff и woff2 заходим в stylesheet.css и там копируем готовые подключения конструкции @font-face наших файлов
и вставляем как можно выше в самый верх перед обнулением. */

/* Чей сервер быстрее google или ваш? С протоколами http/2 абсолютно уже не имеет значения количества к внешним серверам. */

/* @font-face это css часть и мы должны ее написать сугубо в css файле */
@font-face {
	font-family: "Gilroy";
	src: url("../fonts/Gilroy-Regular.woff2") format("woff2"), url("../fonts/Gilroy-Regular.woff") format("woff"); /* сначала подключается формат "woff2", если браузер его не понимает тогда подключается woff */
	font-weight: normal;
	font-style: normal;
	font-display: swap;
}

@font-face {
	font-family: "Gilroy";
	src: url("../fonts/Gilroy-Bold.woff2") format("woff2"), url("../fonts/Gilroy-Bold.woff") format("woff");
	font-weight: bold;
	font-style: normal;
	font-display: swap;
}
/* option + command + f  для замены   */
/* ОБНУЛЕНИЕ СТИЛЕЙ */
*,
*::before,
*::after {
	margin: 0;
	padding: 0;
	border: 0;
}
li {
	list-style: none;
}
a,
a:visited {
	text-decoration: none;
}
a:hover {
	text-decoration: none;
}
h1,
h2,
h3,
h4,
h5,
h6 {
	font-weight: inherit;
	font-size: inherit;
}
img {
	vertical-align: top;
}
html {
	font-size: 16px; /* по умолчанию */
}
body {
	/* font-family: "Gilroy", sans-serif; */
	line-height: 1;
	/* по умолчанию 
	font-size: 16px;
	line-height: 110%;
	font-family: "Times New Roman", Times, Baskerville, Georgia, serif;
	*/
}
/* ------------------------------ */
/* Взята выборка css-свойств которые чаще всего используются
в работе */

/* Берем шрифты с собой!!! */

/* Два варианта подключения семейств шрифта */

/* (1) Удаленное подключение. Подключение из внешнего источника (по ссылке) */
/* (2) Локальное подключение. Подключение локальных файлов */

/* --------------- */

/* Свойства шрифта */

/* font-family: "Имя шрифта", "Имя шрифта", ..., тип шрифта */ /* (фундамент) */
/* font-family - это наше главное css-свойство, кот. мы объявляем, каким же семейством шрифта 
теперь будет отображаться текст внутри этого селектора и его дочерних элементов.
Тут мы знакомимся с тем что css-свойства бывают наследуемыми и не наследуемыми.
font-family  и практически все css свойства, кот. мы сегодня изучим, они наследуемые.
Наследуемые css-свойства - body у нас самый родительский объект(но самый родительский это html), 
вложенные html-теги наследуют свойства font-family,  то есть свойство влияет и на body и на всех его
дочерних тегов. Все что внутри body будет наследоваться font-family и весь текст будет выводиться
именно этим шрифтом, если не указано иное.  То есть глобальным шрифтом будет тот что мы указали в body,
А если мы для селектора класса  .text укззали другой font-family(Poppins) то для этого класса и всех его дочерних объектов 
будет использоваться уже другой font-family. Внутри  этих объектов с классом .text уже главенствует Poppins, 
а не шрифт указанный в body */
/* Первый "Имя шрифта", это тот шрифт кот. мы бы очень хотели, что бы отобразился. 
Если у нас шрифт состоит из одного слова, то кавычки можно не ставить, если у нас шрифт состоит 
из двух или более слов то мы обязаны поставить кавычки, но лучше брать 
и абсолютно все названия писать в кавычках.
Второй "Имя шрифта" значит, что если нет по той или иной причине первого "Имя шрифта" то отобразится нам второй "Имя шрифта", 
если нет второго "Имя шрифта" то отобразится третий и т.д. "Имя шрифта". 
В конце пишется тип шрифта, это если вообще никакого с предложенных нами вариантов не нашлось, то будет выведен любой 
шрифт кот. есть такого типа  (sans-serif). Если мы ничего не укажем, а только, на пример serif, то выведется тот же Times New Roman,
потому что в виндовсе это шрифт по умолчанию с засечками, на маках Helvetica Neue. */
/*
Устанавливает семейство шрифта
Шрифт - это то каким именно образом будет выведен каждый символ,
в совокупнусти с насыщеностью шрифта, размером шрифта и стилем шрифта.
Любой шрифт это файл, находящийся в компьютере. Каждый символ внутри 
этого файла(шрифтафового файла) это векторные изображения. Шрифты создаются
особыми дизайнерами, кот. работают со шрифтами, они каждый символ от руки рисуют
переведенный в вектор(в векторное изображение) и специальными програмами создают 
шрифтовой файл кот. устанавливается в систему.

Типы шрифта:   (фундаментальное свойство)
serif — шрифты с засечками (антиквенные), типа Times;
sans-serif — рубленные шрифты (шрифты без засечек или гротески), типичный представитель — Arial; Нам стоит в конце его добавить.
cursive — курсивные шрифты;
fantasy — декоративные шрифты;
monospace — моноширинные шрифты, ширина каждого символа в таком семействе одинакова (шрифт Courier).
*/
.text {
	font-family: "Poppins", sans-serif; /* sans-serif; - это перечесление, что если нету "Poppins", то подключи любой без засечек; */
	/* Что если вдруг по какой то причине гугл сервис не доступен, либо кто то удалил файлы шрифтовые,
	то не сработает заявленный вами шрифт, то хотя бы отобразится похожий sans-serif. Потому что
	если мы подключали Poppins не указали тип sans-serif и при этом у нас что то случилось с файлами,
	то у нас отобразится Helvetica, а если у нас по той или иной причине файлы не доступны, но мы указали 
	тип, что хотябы найди нам какой то без засечек, то мы в итоге получим какой то хотя бы
	похожий чем то на Poppins. По этому хорошая запись это font-family: "Poppins", sans-serif;  
	Используйте тот шрифт кот. вам необходим и тип соответсвующий этому шрифту. 
	Чаще всего используются 2 первых - serif и sans-serif*/

	/* Poppins - это семейство шрифта, но внутри него есть разное начертание */
	/* Хороший дизайнер никогда не будет использовать больше 2-ух семейств шрифтов,
	а то и одно семейство но разное начертание. Когда в макете 3-4-6 семейств то 
	дизайнер заставоляет пользователей привыкать  к слишком большому разнообразию
	форм в тексте(это очень важная штука) */
}
/* Одна из первых задач кот. нам нужно сделать  приступая к верстке любого макета
это понять какие семейства шрифтов использованы в данном макете семейства и 
их вариаций(regular, bold, light,semibold,thin,black,italic) */
/*
font-size: размер [px,%,em,rem]
Определяет размер шрифта элемента.
font-size по умолчанию устанавливается в html элементе, в root элементе, для самого главного 
для самого кореного главного элемента. Если в макете мы понимаем что большинство текста написано другим размером 
шрифта то нам стоит это значение поменять. По умолчанию размер шрифта 16 px.
*/
h1 {
	font-size: 50px;
}
.text {
	font-size: 20px;
}

/*
font-style: (фундаментальное свойство)
Определяет начертание шрифта — обычное, курсивное или наклонное.
normal - Обычное начертание текста.
italic - Курсивное начертание. 
oblique - Наклонное начертание. Курсив и наклонный шрифт при всей их похожести не одно и то же. 
Курсив это специальный шрифт имитирующий рукописный, 
наклонный же образуется путем наклона обычных знаков вправо. 

Если нам нужно подключить italic, соотсветственно как с Gilroy у нас будет 3 подключение отдельного шрифта,
то есть это совершенно отдельный шрифтовый файл и там в font-style будет значение italic.
italic это отдельный файл шрифта. 
*/
/* font-style: normal;  нужен, на пример, сначало мы указали italic, а потом в каком то моменте при
определенном условии нам нужно вернуться по той или иной причине к обычному значению
и перезаписать font-style на значение по умолчанию. */
.text {
	/* font-style: italic; */
	/* если не найдет отдельный файл italic то сработает обычный наклон шрифта oblique */
}

/*
font-weight: (фундаментальное свойство)
Устанавливает насыщенность шрифта.(его толщину).
100 - thin - вообще крайне редко используются
200 - вообще крайне редко используются
300 - lite - еще реже используются
400 - normal - часто используются
500 - medium - чуть реже используются
600 - semibold -чуть реже используются
700 - bold - часто используются
800 - ultra bold 
900 - black - еще реже используются
лучше писать в цифрах.
Если нам надо задать ont-weight 700, он ищет подключен ли  700, 
если 700 не будет, то он возьмет какой то другой 600 либо 800 рядышком.
По этому если у нас в макете указано такое то семейство шрифта, начертание,
мы должны его оставить, если не указано, то мы должны его удалить, что бы не таскать с собой.
*/

.text {
	/* font-weight: 700; */
}

/* Свойства текста */

/*
color (фундаментальное свойство)
Это свойство наследуется. Не наследуется color для тега a.
Анализируя макет, мы должны определить цвет текста кот. преобладает  
и срузу для  body его поменять , что бы не менять каждый раз.
Цвет по умолчанию #000000, когда у нас 16-ти ричный код, первая часть со второй совпадает,
ее можно сокращать -  6 нулей можно заменить на 3 нуля.

Определяет цвет текста. Для задания цветов обычно используются 
числа в шестнадцатеричном коде, 
либо с помощью RGB.
*/

.text {
	/* color: rgb(162, 166, 176); */
	/* color: #a2a6b0; */
	/* color: rgba(162, 166, 176, 0.1); это его не прозрачность(альфа канал-отвечает за прозрачность) */
}

/*
text-align (фундаментальное свойство)
Определяет горизонтальное выравнивание текста и строчных объектов  (внутри) в пределах элемента.  То есть
текст (который в .text) написан в пределах блочного элемента p с классом .text соответственно  text-align: center; 
выравнивает текст по середине в пределах элемента(то есть элемент это текст). 
Это свойтство тоже наследуется - текст внутри вложенных элементов в этот параграф тоже будут выровняные по центру,
но не сами объекты. Все что внутри класса .text будет выравниваться по центру. Картинка у нас блочно-строчный объект
и она будет подвержена влиянию свойства text-align;center; но при условии если будет внутри .text.

center - Выравнивание текста по центру.

justify - Выравнивание по ширине, что означает одновременное выравнивание по левому и правому краю. 
Чтобы произвести это действие браузер в этом случае добавляет пробелы между словами.
Эти пробелы между словами расставлены таким образом что бы слева-справа у нас слова прилегали плотно к краяс. 
В какую бы ситуацию не попал бы текст он будет слева и справа прилегать 
к краям(в обычном состоянии текст выстроен лесенками справа, пробелы между словами одинаковые).

left - Выравнивание текста по левому краю.  Изначально текст прижат к левому краю, 
и значение left следует применять тогда когда уже было изменено значение, 
мы опять же при адаптиве хотим его вернуть.
right - Выравнивание текста по правому краю.
*/
/* Не пытайтесь взять блочный объект и поставить его как то по центру!!! */

.text {
	/* text-align: center; */
}
.image {
}

/*
text-decoration    (справочное свойство)
Добавляет оформление текста в виде его подчеркивания, перечеркивания, линии над текстом и мигания. 
Одновременно можно применить более одного стиля, перечисляя значения через пробел. Это свойство наследуется и может принимать значения:
line-through - Создает перечеркнутый текст.
overline - Линия проходит над текстом.
underline - Устанавливает подчеркнутый текст. 
none - Отменяет все эффекты, в том числе и подчеркивания у ссылок, которое задано по умолчанию.
*/

.text {
	text-decoration: none;
}
.text span {
	text-decoration: line-through;
}

/*
text-shadow: горизонтальное_смещение вертикальное_смещение размер цвет;  (справочное свойство)
Добавляет тень к тексту (только для текста).
Прмер text-shadow: 1px(горизонтальное смещение) 1px(вертикальное смещение) 1px(размер тени) #000(цвет тени);

*/

.text {
	/* text-shadow: 1px 1px 1px #000; */

	/* Если нам нужно смещение по x и y вверх и вправо - тогда мы используем отрицательные значения. */
	/* text-shadow: -5px -5px 1px  rgba(162, 166, 176, 0.1); */
}

/*
text-transform   (справочное свойство)
Управляет преобразованием текста в заглавные или прописные символы.
capitalize  - Первый символ каждого слова в предложении будет заглавным. Остальные символы свой вид не меняют.
lowercase - Все символы текста становятся строчными (нижний регистр). 
uppercase - Все символы текста становятся прописными (верхний регистр).
none - Не меняет регистр символов.
*/
.text {
	text-transform: none;
}
/* Если у нас есть слово с больших букв, укажите 	text-transform: uppercase; для того что бы 
там дальше не происходило текстом (напишет с маленьких букв) он будет так как задуман дизайнером.
(именно такие мелочи отделяют профессионала от не профессионала). */
/*

line-height (справочное свойство)
Устанавливает межстрочный интервал текста. Широко применяется при верстке текста.
*/
/* Он может быть указан в px, %;
Поскольку межстрочный интервал по макету везде разный, мы добавляем в обнуление line-height: 1;
мы обнуляем межстрочный интервал до 1, потому что он по умолчанию чуть больше 1. 
1 это как 100% такой же как шрифт - шрифт 16px и межстрочный интервал будет 16px.
Но не всегда межстрочный интервал равен шрифту. */

.text {
	line-height: 150%; /* 150% от размера шрифта. Размер шрифта 16px, 150% от 16px; */
}

/*
letter-spacing
Определяет интервал между символами (буквами). Используется когда нужно разрядить текст.
*/
.text {
	letter-spacing: 1px;
}

/*
word-spacing
Определяет интервал между словами. Используется когда нужно разрядить текст.
*/
.text {
	word-spacing: 10px;
}

/*
text-indent
Устанавливает величину отступа первой строки блока текста. 
При меняется, если нам нужно создать что-то типа красной строки.
*/

.text {
	text-indent: 50px;
}

/*
white-space
Отвечает за поведение пробелов между словами 
Управляет свойствами пробелов между словами. Применяется в основном со значением 
nowrap которое запрещает перенос строки. (пробелы между словами зацементируются, текст не будет заламываться, это проблема,
потому что у нас появится горизонтальный скрол).
Таким образом весь текст отображается в одну строку и не ломается. 
Значение normal вернет все как было.(будет заламываться в пробеле, когда текст не помещается он будет заламываться.)
*/

.text {
	/* white-space: nowrap; */
	/* нужно быть очень осторожными, так как мы работаем с адаптивом,
	он может вызвать проблему, потому что текста может прибавится, но  можем зацементировать 
	пробелы и на опыте на оборот сделать надежнее. */
}
