/* Lesson 7 https://www.youtube.com/watch?v=cbugPPlltjA  */

/* 
&display=swap
&subset=cyrillic-ext 
*/
@import url("https://fonts.googleapis.com/css?family=Roboto:regular,700,900&display=swap");

/* ОБНУЛЕНИЕ СТИЛЕЙ */
*,
*::before,
*::after {
	margin: 0;
	padding: 0;
	border: 0;
	box-sizing: border-box;
}
li {
	list-style: none;
}
a,
a:visited {
	text-decoration: none;
}
a:hover {
	text-decoration: none;
}
h1,
h2,
h3,
h4,
h5,
h6 {
	font-weight: inherit;
	font-size: inherit;
}
img {
	vertical-align: top;
}
html,
body {
	height: 100%;
}
html {
	font-size: 16px; /* по умолчанию */
}
body {
	line-height: 1;
	font-family: "Roboto";
	background: #f5f5f5;
}
.wrapper {
	min-height: 100%; /* всегда будет на всю высоту экрана, и далее блоки мы сможем размещать относительно него, относительно всей высоты экрана */
	overflow: hidden;
	padding: 50px;
}
/* ------------------------------ */
/* background - работа с фонами. Универсальное css-свойство и оно может в себе содержать множество значений */
/* Использование свойства background очень важно использовать только там где у нас действительно фон, где изображение не контентное, то есть оно не будет убираться, меняться.
background - сам по себе фон не задает никакого размера объекту.
В освном background используется для элементов декора, дизайна, то есть не там где у нас непосредственно контент. */

/* Шпаргалка CSS свойства background https://fls.guru/cssbackground.html */

.block {
	font-size: 30px;
	/* padding: 30px; */

	/* Семейства background: */

	/* 
	background-color  
	Определяет цвет фона элемента, то есть без приставки background со свойством  color определяет цвет текста и более того элементов строчных объектов, 
	а background-color делает тоже самое но для фона у блока.
	Важно!!! - padding будет действовать как, он будет оттеснять  контент внутрь, а фон будет оставаться на своих местах
	background-color: green; либо мы можем записать background: green; с указанием цвета.*/
	/* -------------------------------------------------------------------------------------------------- */

	/* 
	background-image
	Устанавливает фоновое изображение для элемента либо задает градиентную заливку(через background-image тоже может задаваться цвет, только градиентную цвет).
	- background-image: url("../img/icon.png");  по умолчанию картинка кот. мы укажем, она будет повтаряться по горизонтали и по вертикали безконечное количество раз. Если картинка полупрозрачная, то сквозь нее мы будем видить цвет который
	указан в отдельном свойсве background-color: green;, то есть тут у нас слоями налагается - сначала идет цвет фона background-color, а сверху на него накладывается картинка  background-image - с начала цвет потом картинка - такая последовательность.
	Чаще всего background-image используется как раз для того что бы задать в качестве фона не цвет, а картинку.*/
	background-image: url("../img/01.png"); /* формат png - поддерживает прозрачность. 

 - Мы не можем указать полупрозрачность в background-image.
 */
	/* linear-gradient говорит о линейном градиенте, то есть из точки а в точки б. Дальше открываются скобки и первым делом мы указываем направление (можно задать направление под каким то углом), и дальше у нас перечисляются через
 запятую цвета rgba(236, 232, 157, 1) 0% , 0% - означает когда он начнется, 0% это означает что он начинается сначала, а второй цвет rgba(94, 83, 115, 1) 50% начинается с  50%  то есть с половины. И третий цвет идет до конца rgba(24, 181, 164, 1) 100%). */

	background-image: linear-gradient(to bottom, rgba(236, 232, 157, 1) 0%, rgba(94, 83, 115, 1) 50%, rgba(24, 181, 164, 1) 100%);

	/* linear-gradient нельзя совмещать с изображением в background-image.  background-image - это одно свойство, это либо background-картинка либо background-градиент. */
	/* https://www.colorzilla.com/gradient-editor/  тут есть настройки прозрачности для linear-gradient.(это нужно что  бы подскрыть текст, картинку) */

	/* -------------------------------------------------------------------------------------------------- */
	/* Определяет, как будет повторяться фоновое изображение */
	background-repeat: no-repeat; /*оно не будет повторятся(заполнять) по горизонтали и по вертикали (в основном используется) . По умолчанию у него значение repeat */

	background-repeat: repeat; /*  будет повторяться. (не часто используется)*/
	background-repeat: repeat-x; /* - повторение по оси x; (не часто используется)*/
	background-repeat: repeat-y; /* - повторение по оси y; (не часто используется)*/
	/* такие повторения repeat-x/repeat-y можно использовать в бешовных изображениях либо паттерны - это изображение конец кот. это начало их и если их составлять вместе то мы не увидим шва, у нас получится сплошной фон красивый, но при этом 
	мы сэкономим  место, потому что мы будем использовать очень маленькое изображение, но поскольку мы будем его повторять то получится целостная картина без шва (такой прием используется довольно редко)*/

	background-repeat: space; /*	- картинка не будет зарезаться,  а между изображениями будет меняться отступ(растояние между картинками будет разное), это что то на подобии text-align: justify; - кот.меняет 
	пробелы между словами так что бы текст слева и справа плотно прилегал к краям (не часто используется)*/
	background-repeat: round; /* эффект тот же самый но место того чтобы увеличивать или уменьшать отступы между картинками round деформирует само изображение, по этому это довольно плохое решение. (не часто используется)*/

	/* -------------------------------------------------------------------------------------------------- */
	/* Задает начальное положение фонового изображения, где первое значение 
	(проценты, px, слово) определяет расположение 
	по горизонтали, второе - вертикали. */
	background-position: 0 0; /* означает верхний левый угол. Вместо значений пиксельных тут могут быть процентные значения и могут быть словесные значения. */
	/* словесные значения - первым делом мы говорим за горизонталь - ось x это left/right,  а вертикаль  - ось y это top/bottom или bottom/top(когда мы указываем словами - порядок не важен). То есть background-position: 0 0;  это left top.*/
	background-position: center center; /* - разместит ровно по центру. */
	background-position: center; /* и когда у нас 2 одинаковых значения то мы можем одно убрать и получим центрированое изображение. */
	background-position: left; /* если нам нужно указать картинку слева, а по вертикали по центру, мы можем использовать так же только указание left и это подразумевает что центрирование будет автоматически. */

	/* лучше использовать числовые значения */
	background-position: 10px 100px; /* сперва горизонталь потом вертикаль. Мы можем установить изображение в какой то конкретной точке */
	background-position: 50%; /* это тоже самое что центр. Либо background-position: 50% 50%; Здесь отличие от других свойст - сам размер картинки учитывается, тоесть если указываем background-position: 50%; то это не верхний левый угл картинки по центру,
	 а сама картинка по центру, это фон и картинка может быть гораздо больше самого блока, и она не позицинируется относительно своего верхнего левого угла, она становится фоном  по указаному позицинированию. */
	background-position: 10% 20%; /* проценты беруться от ширины родителя, а проценты вертикальные от высоты родителя. То есть ширина объекта взята 10% и на это значение установлено изображение слева. 
	Высота блока взята 20% и соответственно на это значение установлен объект онтосительно верхней точки. С процентами более гибко работать при адаптиве */
	background-position: 10% 20px; /* теперь у нас удаленность от левого края будет пропорциональна ширине то есть 10%(зависить от ширины объекта), но 20px у нас указано четко и изображение будет опущено всегда на 20px в не зависимости от высоты объекта. */

	/* -------------------------------------------------------------------------------------------------- */
	/* Масштабирует фоновое изображение согласно заданным размерам. 
	В цифрах, где первое значение (проценты, px) определяет ширину, 
	второе - высоту. Либо специальным значением. */
	background-size: auto auto; /* 2 значения - ширина высота. Автоматически это значит что - какого размера картинка, такая она и будет. */
	background-size: 200px; /* если мы указываем только ширину, соответственно высота подстроится автоматически, ее указывать не нужно.  */
	background-size: 40px 150px; /* но картинку разплющит и ничего хорошего из этого не выйдет. */
	background-size: auto 200px; /* если мы хотим указывать высоту только, а ширину подстраивать, тогда нам следует записать так, что бы система поняла что мы именно отталкиваемся от высоты, а не от ширины.  */
	background-size: 50%; /* сейчас мы указали 50% от ширины блока, соответственно чем уже блок, тем уже и само изображение.   */
	background-size: 100%; /* картинка станет на всю ширину блока, высота подстроиться автоматически.  */
	background-size: cover; /*  оно масштабирует значение, таким образом что изображение постоянно пытается уместиться в объект кот. оно задано и оно отлично работает с background-position: 50%; то есть с позицинированием по центру. 
	Картинка будет всегда стараться заполнить блок(никаких пустых полей не будет). По скольку у нас позицинирование по центру, то мы всегда будем видеть главную часть изображения  */
	background-size: contain; /* картинка займет по меньшей стороне картинки.  (редко используется)*/
	background: green url("../img/01.png") 50% / cover;
	/* -------------------------------------------------------------------------------------------------- */

	/* -------------------------------------------------------------------------------------------------- */
	/* Устанавливает, будет ли прокручиваться фоновое изображение вместе с содержимым элемента. */
	/* Он отвечает за то, будет ли картинка скролиться. По умолчанию значение scroll, но если мы изменим на fixed - изображение автоматически ставновиться фоном не у самого блока, а у всего body, и она не скролится вместе со скролом  */
	background-attachment: scroll;
	/* -------------------------------------------------------------------------------------------------- */
	/* Универсальное свойство */
	background: green url("../img/01.png") 50% / cover no-repeat fixed;

	background: linear-gradient(to bottom, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.65) 100%), url("../img/image_1.jpg") 0 0 / 100px no-repeat, green url("../img/01.png") 50% / cover no-repeat;

	background: url("../img/image_1.jpg") 0 0 / 100px no-repeat, green url("../img/01.png") 50% / cover no-repeat; /* для установки множественных фоновых картинок для одного блока нужно следовать некоторым правилам - чем дальше 
	изображение после запятой, тем оно ниже по слоям, чем выше изображение тем оно выше по слоям. Цвет указываем в самой последней записи  */

	/* -------------------------------------------------------------------------------------------------- */
	/* Очень важно!!!! */
	width: 100px;
	height: 100px;
	background: url("../img/01.png") 50% / 100px 100px no-repeat;
	/* background это фон, а у нас блок полностью нулевой, там ничего нет,  он будет 100% по ширине, потому что это блочный тег, но у него будет нулевая высота - нету ничего что задает размеры этому блоку, 
		по этому мы картинку не увидим - это всего лишь фон у чего то, а если у нас ничего нет то и фона нет. Но если вы задаете картинку с помощью тега img - это блочно-строчный объект и он как бы внутрь html 
		вставляет этот объект у кот. есть определенные размеры изображения и оно так же по умолчанию вылезет у нас в браузере.
		Если мы работаем через фон, то нам обязательно задать размеры блоку, либо как правило - размеры задает контент */
}
/* -------------------------------------------------------------------------------------------------- */
/* Пример */
ul {
	margin: 20px 0px;
}
ul li {
	margin: 0px 0px 15px 0px;
	font-size: 12px;
	min-height: 30px; /* если тект у нас меньше чем сама иконка, мы должны задать min-height по высоте иконки, что бы иконка не была обрезаной */
	background: url("../img/icon.png") 0 0 / 30px no-repeat;
	padding: 7px 0px 0px 30px; /* так повлияет на background внутренний отступ. */
}

/* ------------------------------ */
/* Решение  Практическая 1  */
.whoweare {
	padding: 0px 0px 170px 0px;
}
.whoweare__container {
	max-width: 1020px;
	margin: 0px auto;
	border: 1px solid transparent; /* если у нас нет нижнего padding и нету border то отрицательный отступ у картинки 	margin: 0px 0px -120px 0px; работать не будет, именно при реализации вниз. 
	Если мы картинку разместим под блоком и наедим на верхний блок там все будет ок, потому что в данной реализации как будто бы у белого блока - у контейнера нету рамок, у него нету границ,
	и margin не может под него залесть. Мы ему должны дать некую опору через кот. этот отрицательный margin должен перелезть. Мы можем задать минимальный padding вниз.
	margin срабатывает тогда когда у блока  есть свое тело, либо padding буквально в 1px  либо border прозрачный.    (такое редко встречается) */
	padding: 100px 87px 0px 87px;
	background: #fff url("../img/bg.png") 100% 0 no-repeat;
}
.whoweare__content {
}
.whoweare__subtitle {
	font-weight: bold;
	font-size: 12px;
	line-height: 27px;
	letter-spacing: 2.5px;
	text-transform: uppercase;
	margin: 0px 0px 28px 0px;
	background: url("../img/icon.png") 0 0 no-repeat;
	padding: 0px 0px 0px 30px;
}
.whoweare__title {
	color: #02133c;
	font-weight: 900;
	font-size: 36px;
	line-height: 42px;
	max-width: 583px;
	margin: 0px 0px 33px 0px;
}
.whoweare__text {
	font-size: 16px;
	line-height: 24px;
	letter-spacing: 0.15px;
	margin: 0px 0px 52px 0px;
}
.whoweare__image {
	margin: 0px 0px -120px 0px;
}
.whoweare__image img {
	max-width: 100%;
}

/*---------------------------*/
/* Решение  Практическая 2  */
.someblock {
	padding: 15px;
	color: #fff;
	max-width: 350px;
	background: #252525;
	box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
	border-radius: 6px;
	font-size: 0;
}
.someblock__rating {
	vertical-align: middle;
	display: inline-block;
	width: 60%;
}
.rating {
}
.rating__stars {
	display: inline-block;
	vertical-align: middle;
}
.rating__value {
	font-size: 12px;
	display: inline-block;
	vertical-align: middle;
}
.someblock__action {
	vertical-align: middle;
	width: 40%;
	text-align: right;
	display: inline-block;
}
/* ======================================================================================================================= */
/* Кнопку прибить к правому краю можно несколькими способами:
- во первых можно сделать, если она блочно-строчная, то можно закрыть ее в контейнер - в родителя, этому родителю задать text-align:right;
- если она блочная задать margin слева автоматический 	margin: 0px 0px 0px auto; и она прибьется справа */
/* ======================================================================================================================= */
.someblock__button {
	font-size: 14px;
	background: #262626;
	border: 2px solid #303030;
	border-radius: 30px;
	padding: 11px 32px;
	text-transform: uppercase;
	display: inline-block;
	color: rgba(255, 255, 255, 0.5);
}
