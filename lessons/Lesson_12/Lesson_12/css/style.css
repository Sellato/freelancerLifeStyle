/* УРОК №12 
https://youtu.be/UpqmgRuvxpk 
*/

/* 
&display=swap
&subset=cyrillic-ext 
*/

/* ОБНУЛЕНИЕ СТИЛЕЙ */
*,
*::before,
*::after {
	margin: 0;
	padding: 0;
	border: 0;
	box-sizing: border-box;
}
li {
	list-style: none;
}
a,
a:visited {
	text-decoration: none;
}
a:hover {
	text-decoration: none;
}
h1,
h2,
h3,
h4,
h5,
h6 {
	font-weight: inherit;
	font-size: inherit;
}
img {
	vertical-align: top;
}
html,
body {
	height: 100%;
}
html {
	font-size: 16px; /* по умолчанию */
}
body {
	line-height: 1;
	/* color: #000; */
	/* font-family:""; */
	overflow-x: hidden;
	font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
	background-color: #333;
}
.wrapper {
	min-height: 100%;
	padding: 30px;
}
/* ------------------------------ */

/* Селекторы атрибутов */

/* Селекторы атрибутов - это селектор по которому мы можем обратиться не к классу, не к тегу, не к id,  не к следующему элементу, а по паре атрибут-значение. На пример class main -  селектор атрибута.*/

/* Конкретый поиск */
[href="https://www.youtube.com"]
{
	/* color: red; */
}
/* У селекторов атрибутов есть что то на подобии регулярных выражений */

/* Довольно широкого спектра */
/* Поиск окончания */
[href$=".com"] {
	/* color: red; */
}
/* Поиск начала */
[href^="http"] {
	/* color: red; */
}

/* Довольно узкого спектра, редко используется*/
/* Поиск слова из указанных через пробелы 
Ищет перебирает через пробел, то есть атрибут класс и одно из значений которые чередуются через пробелы.
*/
[class~="body-about"] {
	/* color: red; */
}
/* Поиск слова из указанных через дефис */
/* Это сработает если один класс */
[class|="body-about"] {
	/* color: red; */
}
/* Поиск по любому вхождению */
/* Ищет любое упоминание класса или части слова */
[href*=":"] {
	/* color: red; */
}
/* Ограничивающий контейнер */
/* Используем * для того что бы искать в строке эту часть __container, мы резервируем это  __container*/
[class*="__container"] {
	max-width: 800px;
	margin: 0px auto;
}

/* ------------------------------ */
/* ------------------------------ */
/* ------------------------------ */

/* Transform */

.block {
	/* старое место блока */
	/* width: 100%; */
	/* width: 200px;
	height: 200px;
	background-color: rgba(255, 255, 255, 0.1);
	position: relative; */
	/* position: absolute; позицинирует объект относительно релитивного родителя. */
	/* position: relative; позицинирует объект относительно его места положения. */
}

/* 
С помощью 2D и 3D трансформации мы сможем сдвигать, 
поворачивать, масштабировать элементы и делать многое другое!
*/

.block__item {
	/* background-color: #7a956b;
	width: 200px;
	height: 200px;
	line-height: 200px;
	text-align: center;
	text-transform: uppercase; */
	/* color: #fff; */
	/* --------------------------------------------- */
	/* 
	transform: translate(фундаментальный инструмент)

	Сдвигает элемент на новое место, перемещая относительно 
	изначального положения объекта вправо и вниз, 
	используя координаты X и Y. 
	Записывается следующим образом translate (x,y).
	Сдвигает слева на право, сверху вниз.
	Отличия от position:
	1) сам объект мы не делаем relative; мы просто сдвинули с помощью transform.
	2) Процентные значения:
				position: relative; 
				top: 5%; - возьмется от высоты родителя
				left 5%; - возьмется от ширины родителя
				но
				transform: translate(0%, 0%); - это такая штука кот. при указании процентных значений берется от самого объекта, не от родителя.
				Это нам дает колосальные возможности, мы очень легко можем объект опустить на половину 
				именно его высоты transform: translate(0%, 50%); так и на половину его широты.  
	*/
	/* transform: translate(50px, 50px); объект не влияет на окружение, мы просто надвинули на текст и этот объект никак не пострадал*/
	/* transform: translate(0%, 0%); */

	/* Пример */
}
.block {
	width: 200px;
	height: 200px;
	background-color: rgba(255, 255, 255, 0.1);
	position: relative;
}
.block__item {
	background-color: #7a956b;
	width: 200px;
	height: 200px;
	position: absolute;
	top: 0;
	/* 	left: 50%;  */ /* то есть на ширину родителя мы пододвинули объект, теперь всегда будет по центру, вне зависимости от того какая ширина родителя.
	Но он как бы начинанается с центра но сам объект не отцентрован. Зная ширину мы можем его вернуть отрицательным margin. И таким образом объект у нас абсолютный  и при этом всегда по центру.
	Но здесь мы четко привязываемся к ширинам, то есть если у нас поменяется ширина, у нас никакого центрирования не будет.*/
	/* margin: 0px 0px 0px -100px; */

	/* Соответственно тут нам в помощь прийдет transform: translate */
	/* 	transform: translate(-50%, 0%);  */ /* при изменении ширины он всегда будет по центру, потому что 50% у transform: translate как раз высчитывается от ширины самого объекта. */

	/* Когда нам нужно сместить объект относительно своего положения и допустим мы хотим это использовать в процентах и относительно родителя - мы используем position: relative; и процентное значение.
Когда нам нужно привязаться к размерам самого объекта надо помнить что transform: translate и его процентное значение к размерам самого объекта. */

	/* Так же если нам нужно задать только одну сторону синтаксис будет следующим: */
	/* transform: translateX(50%);
	transform: translateY(50%); */
}
/* --------------------------------------------- */
/*
	 transform: scale

	Масштабирует элементы, делая их больше или меньше.
	*/
/* transform: scale(1, 1); - по умолчанию*/
/* transform: scale(0, 1); - если мы укажем 0 то объект у нас пропадет*/
/* transform: scale(0, 1); - если мы хотим получить конкретные  размеры разным сторонам, тогда стоит через запятую указывать  (x,y)*/
/* transform: scale(0.5); - если мы используем одно значение то объект уменьшается сразу по двум осям*/
/* transform: scale(0.1); - это именно 10% от размера самого блока, именно от его размера.*/
/* transform: scale(1, 0.5); тут от 0 до бесконечности*/
/* С помощью transform: scale можно делать анимации*/
/* --------------------------------------------- */
/* Пример анимации */
/* .block__item {
	transform: scale(0);
	transition: all 0.3s ease 0s;
}
.block:hover .block__item {
	transform: scale(1);
} */
/* --------------------------------------------- */
/* 

transform: rotate 
/* Поворачивает элементы. */
/* transform: rotate(45deg); - deg это градусы, на сколько градусов мы будем объкт поворачивать.
transform: rotateX(45deg);
transform: rotateY(45deg);*/
/* Пример */
.block {
	/* overflow: hidden;
	text-align: center;
	color: #fff;
	line-height: 200px;
	font-size: 25px; */
}
.block__item {
	/* width: 200px;
	height: 200px; */
	/* transform: rotateY(100deg); */
	/* transform: rotate(50deg); */
	/* transform: rotate(90deg);
	transition: all 0.9s ease 0s; */
	/* transform: rotate(45deg) translate(-50%, 50%); */
}
.block:hover .block__item {
	/* блок будет крутиться */
	/* transform: rotateY(0deg); */
	/* transform: rotate(0deg); */
	/* transform: rotate(360deg); */
}
/* --------------------------------------------- */
/* transform: skew 
Деформирует (наклоняет) элементы. 
Часто используется что бы наклонить объект. */
/* transform: skew(-5deg, 60deg); поддерживаются положительные и отрицательные значения.*/
/* transform: skew(10deg) чаще используется одна запись что бы сразу сработать на  двух сторонах, и таким образом мы можем объект наклонять */
/* Пример */
.block {
	text-align: center;
	color: #fff;
	line-height: 200px;
	font-size: 25px;
}
.block__item {
	width: 200px;
	height: 200px;
	/* transform: skew(15deg);
	transform: skew(-15deg); */
}
.block:hover .block__item {
}
/* --------------------------------------------- */
/* Позволяет объединить несколько функций 2D-трансформаций в одной. */
/* transform: translate(10%, 10%) scale(0.5) rotate(45deg); */
/* --------------------------------------------- */
/* 
 transform-origin:
 Это уже отдельное свойство, это уже не одно из значений transform.
	Позволяет сместить центр трансформации(точку работы объекта(ось объекта)), относительно которого 
	происходит изменение положения/размера/формы элемента.
	*/
/* transform-origin: center center;  по умолчанию*/
/* transform-origin: top  left;  мы можем сдвинуть наш гвоздик, и теперь наш гвоздик находится в верхнем левом углу объекта, и на этом гвоздике он будет крутиться.*/
/* transform-origin: 0px 0px; */
/* transform-origin в основном используется для анимаций (и объект можно сдвигать по другому, это может помочь и в позицинировании объекта)*/
/* Пример */
.block {
	text-align: center;
	color: #fff;
	line-height: 200px;
	font-size: 25px;
}
.block__item {
	width: 200px;
	height: 200px;
	/* transform-origin: top left;
	transform-origin: bottom right;
	transform-origin: 10% 5%;
	transform-origin: 40px 105px;
	transform: rotate(0deg);
	transition: all 0.8s ease 0s; */
}
.block:hover .block__item {
	/* transform: rotate(30deg); */
}
/* --------------------------------------------- */
/* 
	perspective
	Установка глубины и смена точки начала координат. */
/* 
Эти свойства задаются родителю объектов, который как то трансформируется.
	perspective: 400px;
	perspective-origin: 0 0;
	 */
/* Пример */
.block {
	text-align: center;
	color: #fff;
	line-height: 200px;
	font-size: 25px;
	perspective: 400px;
}
.block__item {
	width: 200px;
	height: 200px;
	/* transform: rotateY(0deg);
	transition: all 0.8s ease 0s; */
}
.block:hover .block__item {
	/* transform: rotateY(35deg); */
}
/* --------------------------------------------- */
/*
	 Что бы мы увидили 3D нам нужно добавлять perspective родителю, и эфект 3D будет зависить от этой perspective.
	Возможно что translate3d анимируется плавнее чем обычный translate*/
/* Пример */
.block {
	text-align: center;
	color: #fff;
	line-height: 200px;
	font-size: 25px;
	perspective: 400px;
}
.block__item {
	width: 200px;
	height: 200px;
	/* 	transform: translate3d(0px, 0px, -50px);  */ /* (x, y, z) только в px. Это выглядит как scale.  */
}
.block:hover .block__item {
	/* transform: rotate3d(40, 40, 40, 45deg);
	transition: all 0.8s ease 0s; */
}
/* --------------------------------------------- */
/* transform-style: flat;
		transform-style: preserve-3d;
	 Определяет, как дочерние элементы должны 
	 отображаться в 3D-пространстве. 
	 /* Пример */
.block {
	text-align: center;
	color: #fff;
	line-height: 200px;
	font-size: 25px;
	position: relative;
	perspective: 400px;
	/* 	transform-style: preserve-3d;  */ /* теперь мы видим что объект как бы нырнул через фон родителя rgba(255, 255, 255, 0.1); у которого прозрачность 0.1 */
	/* Такое используется когда мы делаем переварачивающиеся карточки, мы наводим на объект, он переворачивается, и мы видим другую сторону */
}
.block__item {
	width: 200px;
	height: 200px;
	/* transform: rotateY(35deg); */
	/* transform: rotateY(100deg); */
}
/* --------------------------------------------- */
/* 
backface-visibility: hidden; 
Отображение обратной стороны объекта. */
/* backface-visibility: hidden; */
.block {
	text-align: center;
	color: #fff;
	line-height: 200px;
	font-size: 25px;
	position: relative;
	perspective: 400px;
	transform-style: preserve-3d;
}
.block__item {
	width: 200px;
	height: 200px;
	transform: rotateY(200deg);
	backface-visibility: visible; /* то мы видим обратную сторону */
	backface-visibility: hidden; /* мы не видем второй стороны. Мы будем видить заднюю часть объекта, но не будем видеть переднюю.  */
}
.block:hover .block__item {
}

[data-container] {
	margin: 0px auto;
	max-width: 300px;
}
/* --------------------------------------------- */
/* --------------------------------------------- */
/* --------------------------------------------- */
/* Пример menu (когда использовать позицинирование а когда transform)*/
.menu {
}
.menu__body {
	position: fixed;
	width: 100%;
	height: 100%;
	top: -100%;
	left: 0;
	background-color: #794f45;
	padding: 50px;
	overflow: auto;
	transition: all 0.3s ease 0s;
	/* представим ситуацию что изначально меню body скрыто */
	/* transform: translate(0px, -100%);  */ /* изначально оно у нас скрыто -100%, что бы на любую высоту(кокой бы высоты оно бы не было) оно полностью скрылось. */
	/* Но нам надо сделать плашку, что бы меню заезжало под эту плашку. Сделаем ее с помощью псевдоэлемента ::before. */
}
/* У нас есть фиксированный объект внутри которого есть overflow: auto; то есть скрол содержимого. 
И на него навешан ::before кот. тоже фиксированный(фиксированный элемент не может скролиться), но мы видим как этот псевдоэлемента ::before скролится. 
Когда мы убираем transform: translate у нас перестает скролится .menu__body::before и теперь работает 
так как надо(мы выполнили задачу - наши пункты заезжают под плашку) - это нужно в последствии правильного меню бургера.
При реализации скрывающего меню с помощью transform: translate то у нас плашка скролится вместе с меню чего быть не должно.
Мы не убираем menu__body с помощью transform, а мы убираем его с помощью изначально top: -100%;*/
.menu__body::before {
	/* она должна быть тоже фиксированная */
	position: fixed;
	content: "";
	top: -100%;
	left: 0;
	width: 100%;
	background-color: #77608d;
	height: 50px;
}
.menu__list {
}
.menu__item:not(:last-child) {
	margin: 0px 0px 20px 0px; /* и при клике мы этот объект возращаем */
}
.menu__link {
	color: #fff;
}
.wrapper:hover .menu__body {
	top: 0;
	/* transform: translate(0px, 0px); этим не задавать*/
}
.wrapper:hover .menu__body::before {
	top: 0;
	/* transform: translate(0px, 0px); этим не задавать*/
}
/* --------------------------------------------- */
/* --------------------------------------------- */
/* --------------------------------------------- */
