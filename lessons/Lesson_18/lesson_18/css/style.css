@charset "UTF-8";
/* 
УРОК №18
 https://youtu.be/fcqLtZM9U7w 
 */
/* должен быть в самом верху */
/* 
&display=swap
&subset=cyrillic-ext 
*/
@import url("https://fonts.googleapis.com/css?family=Roboto:regular,500,700,900&display=swap");
/* ОБНУЛЕНИЕ СТИЛЕЙ */
*,
*::before,
*::after {
  margin: 0;
  padding: 0;
  border: 0;
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}

li {
  list-style: none;
}

a,
a:visited {
  text-decoration: none;
}

a:hover {
  text-decoration: none;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: inherit;
  font-size: inherit;
}

img {
  vertical-align: top;
}

html,
body {
  height: 100%;
}

html {
  /* по умолчанию */
  /* font-size: 16px;  */
}

/* добавляем подчеркивание что бы не добавлялся отдельный css файл  */
body {
  line-height: 1;
  color: #fff;
  background-color: #333;
  font-family: "Roboto";
}

.wrapper {
  min-height: 100%;
  overflow: hidden;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
}

/* Такой коментарий попадет в файл css */
/* ------------------------------ */
/* ------------------------------ */
.main {
  -webkit-box-flex: 1;
      -ms-flex-positive: 1;
          flex-grow: 1;
}

._ibg {
  /* сокращение - image background это _ibg*/
  position: relative;
}

._ibg img {
  -o-object-fit: cover;
     object-fit: cover;
  /* получаем изображение которое масштабируется внутрь блока. Изображение перестанет растягиваться и оно подобно background вписывается в объект.*/
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
}

/* Условные ПК, ноуты и телевизоры */
/* 1050 из макета (контейнер + отступы) */
/* Условные планшеты */
/* Условные мобилки */
[class*="__container"] {
  max-width: 1140px;
  margin: 0px auto;
  padding: 0px 15px;
}

/* №1 */
@media (max-width: 1140px) {
  [class*="__container"] {
    /* max-width: 970px; */
  }
}

/* №2 */
@media (max-width: 991.98px) {
  [class*="__container"] {
    /* max-width: 750px; */
  }
}

/* №3 */
@media (max-width: 767.98px) {
  [class*="__container"] {
    /* max-width: none; */
  }
}

.block__items {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-wrap: wrap;
      flex-wrap: wrap;
  row-gap: 30px;
  margin: 0px -15px;
}

.block__item {
  padding: 0px 15px;
  -webkit-box-flex: 1;
      -ms-flex: 1 1 33.333%;
          flex: 1 1 33.333%;
  /* карточки 3  в ряд . Можем позволить объекту увеличиваться flex-grow: 1; */
  min-width: 290px;
}

.item-block {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  height: 100%;
  /* что бы выровнять все карточки по высоте и что бы прибить кнопки снизу, если в какой то из карточек добавится контент  */
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
}

@media (min-width: 1140px) {
  .item-block {
    max-width: 350px;
    /* делаем ограничение по ширине самой карточке .item-block, а не флекс элементу .block__item потому что здесь сложно с падингами   */
  }
}

.item-block__picture {
  position: relative;
  /* это означает object-position: top; с помощью миксина мы можем влиять на этот код, передавать данные
		@extend %ibg;  а шаблон не можем менять.
		@extend .ibg;  мы можем этот класс тоже подключать только не через % а чепез точку. То есть к этому &__picture присвоится ibg шаблон.*/
  padding: 0px 0px 74.28571428571429% 0px;
  /* объяснение на 7:50 https://www.youtube.com/watch?v=fcqLtZM9U7. 260px(высота картинки) делим на ширину карточки 350px  и умножаем на 100% и получаем 74.28571428571429%. */
}

.item-block__picture img {
  -o-object-fit: cover;
     object-fit: cover;
  -o-object-position: top;
     object-position: top;
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
}

.item-block__body {
  -webkit-box-flex: 1;
      -ms-flex: 1 1 auto;
          flex: 1 1 auto;
  /* позволяем ему увеличиваться,что б он занял всю высоту, что бы прибить кнопки снизу  */
  padding: 15px;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  background-color: #424242;
}

.item-block__body *:not(:last-child) {
  margin: 0px 0px 15px 0px;
}

.item-block__title {
  font-size: 40px;
  color: #fff;
}

.item-block__text {
  line-height: 150%;
  color: #eee;
  -webkit-box-flex: 1;
      -ms-flex: 1 1 auto;
          flex: 1 1 auto;
  /* позволим тексту тоже увеличиваться что бы выровнять все карточки по высоте, и таким образом мы прибьем кнопки к низу */
  font-size: 16px;
}

.item-block__button {
  padding: 10px 15px;
  text-align: center;
  color: #fff;
  background-color: green;
  border: 1px solid green;
}

.item-block__button::before {
  content: "";
}

.item-block__button::after {
  content: "";
}

.item-block__button:hover {
  background-color: yellow;
}

.list {
  padding: 30px;
}

.list__item {
  -webkit-transform: translate(-100%, 0px);
      -ms-transform: translate(-100%, 0px);
          transform: translate(-100%, 0px);
  /* пункты слева за viewportom */
  -webkit-transition: 0.3s;
  -o-transition: 0.3s;
  transition: 0.3s;
  /* мы каждый раз умножаем переменную (которая у нас 1,2,3,4,5) на 0.1, 
			соответственно получаем новое значение. И присваеваем уже transition-delay каждый раз новый	результат, 
			в итоге получаем разную задержку. */
  /* 			@if ($var == 1) {
				// таким образом мы получим у первого объекта задержку равную нулю
				$delay: 0;
			} */
  /* мы каждый раз умножаем переменную (которая у нас 1,2,3,4,5) на 0.1, 
			соответственно получаем новое значение. И присваеваем уже transition-delay каждый раз новый	результат, 
			в итоге получаем разную задержку. */
  /* 			@if ($var == 1) {
				// таким образом мы получим у первого объекта задержку равную нулю
				$delay: 0;
			} */
  /* мы каждый раз умножаем переменную (которая у нас 1,2,3,4,5) на 0.1, 
			соответственно получаем новое значение. И присваеваем уже transition-delay каждый раз новый	результат, 
			в итоге получаем разную задержку. */
  /* 			@if ($var == 1) {
				// таким образом мы получим у первого объекта задержку равную нулю
				$delay: 0;
			} */
  /* мы каждый раз умножаем переменную (которая у нас 1,2,3,4,5) на 0.1, 
			соответственно получаем новое значение. И присваеваем уже transition-delay каждый раз новый	результат, 
			в итоге получаем разную задержку. */
  /* 			@if ($var == 1) {
				// таким образом мы получим у первого объекта задержку равную нулю
				$delay: 0;
			} */
}

.list__item:nth-child(1) {
  -webkit-transition-delay: 0.1s;
       -o-transition-delay: 0.1s;
          transition-delay: 0.1s;
}

.list__item:nth-child(2) {
  -webkit-transition-delay: 0.2s;
       -o-transition-delay: 0.2s;
          transition-delay: 0.2s;
}

.list__item:nth-child(3) {
  -webkit-transition-delay: 0.3s;
       -o-transition-delay: 0.3s;
          transition-delay: 0.3s;
}

.list__item:nth-child(4) {
  -webkit-transition-delay: 0.4s;
       -o-transition-delay: 0.4s;
          transition-delay: 0.4s;
}

.list__item:not(:last-child) {
  margin-bottom: 15px;
}

.list__link {
  color: #fff;
}

.list:hover .list__item {
  -webkit-transform: translate(0px, 0px);
      -ms-transform: translate(0px, 0px);
          transform: translate(0px, 0px);
  /* при ховере вылазят */
}

/* .item-block__button {
	padding: 10px 15px;
	text-align: center;
	color: #fff;
	background-color: $main;
	&.button {
		// это значит 2 класса сразу. Мы работаем внутри этого класса .item-block__button и добавляем к ниму еще 1 класс .button
		background-color: #000;
	}
	.button {
		// теперь обращение идет ко всем классам button внутри всех объектов с классом .item-block__button
		background-color: #000;
	}
} */
