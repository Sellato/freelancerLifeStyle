/* 
УРОК №17 
https://youtu.be/kvj08Pc1zKs  
*/
/* 
&display=swap
&subset=cyrillic-ext 
*/
@import url("https://fonts.googleapis.com/css?family=Roboto:regular,500,700,900&display=swap");

/* ОБНУЛЕНИЕ СТИЛЕЙ */
*,
*::before,
*::after {
	margin: 0;
	padding: 0;
	border: 0;
	box-sizing: border-box;
}
li {
	list-style: none;
}
a,
a:visited {
	text-decoration: none;
}
a:hover {
	text-decoration: none;
}
h1,
h2,
h3,
h4,
h5,
h6 {
	font-weight: inherit;
	font-size: inherit;
}
img {
	vertical-align: top;
}
html,
body {
	height: 100%;
}
html {
	/* по умолчанию */
	/* font-size: 16px;  */
}
body {
	line-height: 1;
	color: #fff;
	background-color: #333;
	font-family: "Roboto";
}
.wrapper {
	min-height: 100%;
	overflow: hidden;
	display: flex;
	flex-direction: column;
}
/* ------------------------------ */
.main {
	flex-grow: 1;
}
/* https://www.youtube.com/watch?v=kvj08Pc1zKs с начала видео о ситуации с outline в инпуте */

/* ------------------------------------------------------------------------------------------------------------------------- */
/*
 Адаптив

 Адаптивная верстка подразумевает перестроение объектов на лету из одной конструкции в другую.
--------------------
 Адаптацию связывают с брейкпоинтами.
--------------------
 viewport - это видимая часть. То есть это окно(отверстие) через которое мы можем видеть сайт.
--------------------
 Ширина сайта - его не существует. Ширина ограничивается только устройством, только viewportом.
--------------------
 Полотно - это от края до края макета, у него тоже есть какой то размер.
--------------------
 Отзывчивая верстка - это когда мы берем адаптивную верстку(то есть брейкпоинты) и берем олдскульную технологию(резиновую верстку) 
 и мы это все скрещиваем. Это самый высокий левел адаптива, самый дорогой и сложный. Отзывчивая верстка не предусматривает брейкпоинты для контейнера.
 Допустим ситуация первая когда ограничивающий контейнер есть, но в момент когда мы его якобы касаемся - он не брейкпоинтом сужается,
 а по пиксельно сужается, то есть тут включается в работу резиновая верстка, но резина не может работать вечно, когда то объекты все таки перестанут быть 
 читабельными и в какой то момент сработает брейкпоинт - вот она совокупность ризины + адаптивная верстка. 
 То есть мы теперь используем брейкпоинт тогда когда это нужно, а не тогда когда у нас построена сетка.
Что есть отзывчивость - это есть путь на всем протяжении сужении экрана, то есть мы как будто режисируем адаптив.
с 2:26:00 https://www.youtube.com/watch?v=kvj08Pc1zKs
 */

/* Условные ПК, ноуты и телевизоры */
/* 1050 из макета (контейнер + отступы) */
@media (max-width: 1050px) {
	/* когда ширина экрана не больше чем или меньше чем 1020px.
	Когда ширина экрана доходит до нужной точки брейкпоинта - в действие вступает код который мы тут задали. */
}
/* Условные планшеты */
@media (max-width: 991.98px) {
}
/* Условные мобилки */
@media (max-width: 767.98px) {
}
/* ------------------------------------------------------------------------- */
/* Это необходимый минимум техники для адаптивной верстки. */

[class*="__container"] {
	max-width: 1050px; /* прибавили еще 30px за счет отступов безопасности 15px+15px  и вышло 1020+15+15=1050px.
	Конкретно в этом макете у нас max-width: 1020px; + отступы безопасности  */
	margin: 0px auto;
	padding: 0px 15px; /*  - отступы безопасности */
}

/* Сетка брейкпоинтов */
/* №1 первый breakpoint*/
@media (max-width: 1050px) {
	/* @media позволяет нам установить брейкпоинт */
	[class*="__container"] {
		/* max-width: 970px; это ширина которая меньше чем у планшетов которые имеют 1024px в горизонтальном положении. */
	}
}
/* №2 второй breakpoint*/
@media (max-width: 991.98px) {
	[class*="__container"] {
		/* max-width: 750px; */
	}
}
/* №3 третий breakpoint*/
@media (max-width: 767.98px) {
	[class*="__container"] {
		/* max-width: none; */
	}
}
/* ------------------------------------------------------------------------- */

.block {
	padding: 20px 0;
	background-color: #794f45;
}
.block__container {
}
.block__items {
	/* мобильное устройство */
}
.block__item {
	min-width: 150px;
	flex: 0 1 33.333%;
	border: 1px solid #000;
	background-color: #7a956b;
	margin: 0px 0px 80px 0px;
}

@media (max-width: 767.98px) {
	.block__item {
		margin: 0px 0px 20px 0px;
	}
}

/* 
Mobile First 

Mobile First призван уменьшить количество строк кода на мобильных устройствах 
и делается это с помощью запросов min-width. 
*/
@media (min-width: 540px) {
	.block__items {
		/* сделаем объект флексом только на устройствах которые шире нужного нам значения. */
		display: flex;
	}
}

/* 
Большие экраны - 1440px
Маленькие экраны - не меньше 1024px
Планшеты - от 1024 до 768
Мобильные устройства - ниже 768(именно ниже, а не ниже и равно 768)

*/

/* Не более чем или равно 1110px (меньше или равно чем 1110px) */
@media (max-width: 1109.5px) {
	/* если max-width: 1109.5px тогда на 1110px у нас еще будет старый вариант, а когда пойдем меньше то уже новый. */
}

/* Более сложные условия */
/*
@media (min-width: 479.98px) and (max-width: 767.98px) {
	Тут написано, что этот код сработает только на устройствах которые меньше значения max-width: 767.98px 
	но больше чем значение  min-width: 479.98px. Промежутки от   479.98px до 767.98px - вот в этом промежутке 
	у нас блоки будут background-color: #77608d; и padding: 20px;.
	.block__item {
		background-color: #77608d;
		padding: 20px;
	}
}
*/
